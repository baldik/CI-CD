name: CI/CD Pipeline with SAST

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      # Шаг 1: Получаем код из репозитория
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Шаг 2: Настраиваем окружение Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      # Шаг 3: Устанавливаем зависимости
      - name: Install dependencies
        run: | 
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8  # Добавляем flake8 в установку
          
      # Шаг 4: Проверяем стиль кода с помощью flake8
      - name: Run flake8 code style check
        run: |
          flake8 . --max-complexity=10 --max-line-length=88 --statistics
          
      # Шаг 5: Запускаем SAST-сканер (Bandit)
      - name: Run Bandit SAST Scan
        run: |  
          pip install bandit
          bandit -r . --severity-level high --confidence-level high -f json -o bandit_results.json || true
        
      # Шаг 6: Анализируем отчет Bandit
      - name: Check Bandit Results
        id: bandit-check
        run: |
          if [ -f bandit_results.json ]; then
            if jq -e '.results[] | select(.issue_confidence == "HIGH" and .issue_severity == "HIGH")' bandit_results.json; then
              echo "Bandit found critical vulnerabilities! Failing the pipeline."
              exit 1
            else
              echo "No critical vulnerabilities found by Bandit."
            fi
          else
            echo "Bandit report not found. Assuming no issues."
          fi
          
      # Шаг 7: Загружаем отчет Bandit как артефакт
      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit_results.json
          retention-days: 30
          
      # Шаг 8: Запускаем сканер зависимостей Trivy
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'HIGH,CRITICAL'
          
      # Шаг 9: Запускаем наши unit-тесты
      - name: Run Tests with pytest
        run: | 
          python -m pytest tests/ -v